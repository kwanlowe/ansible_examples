# Create PVs on all "free" disks on a host
# Extend a target VG with the new PVs
# Caveat: This playbook assumes the PVs are the first
#    and only partition on the disk. 
# (c) Kwan Lowe, 2016, Apache License 2.0 

- hosts: "{{ variable_host | default('klltest')}}"
  become: true
  become_user: root

# vars definitions:
# targetVG - passed from extra_vars at runtime (or not)
# pvScanCmd - list the existing PVs on the system and return the disks associated with them

# Depending on what sort of virtualization you use, one of the following will work.
# TODO: Need a cleaner way of handling different capabilities. 
# scsiScanCmd - list the SCSI disks on a system
# vdScanCmd - list the /dev/vdx disks on a system

# compareCmd - Fairly dumb diff of existing PV disks and SCSI disks. If it's in this list it
#   should be a "free" disk. No telling what happens on raw disks (e.g., Oracle ASM disks, etc.).
  
  vars:
    targetVG: "{{ target_vg | default('appls_vg')}}"
    pvScanCmd: "PVS_OUT=$(pvs -o pv_name --noheadings|sed -e 's:^[\ ]*::' -e 's:[1-9].$::'|sort -u)"
    scsiScanCmd: "SCSI_OUT=$(lsscsi |awk '/sd/{print $NF}'|sort)"
    vdxScanCmd: "SCSI_OUT=$(lsblk  -l -p -d -n -o NAME)"
    compareCmd: 'comm -3 <(echo "$PVS_OUT") <(echo "$SCSI_OUT")'
    cleanWhiteSpace: "sed -e 's:^[\ \t]*::' -e 's:[\ \t].*$::'"
 
  tasks:
    - name: "Find free disk"
#      shell: "{{ pvScanCmd }}; {{ scsiScanCmd }}; {{ compareCmd }}|tr '\n\t' ' '" 
      shell: "{{ pvScanCmd }}; {{ vdxScanCmd }}; {{ compareCmd }}|tr '\n\t' ' '" 
      args:
        executable: /bin/bash
      register: freeDisk

    - name: "Create PV on {{ freeDisk.stdout }}"
      shell: >
        freeDevs="{{ freeDisk.stdout }}";  
        for disk in $freeDevs; do 
          if [ ! -b  "${disk}1" ]; 
            then (echo -e "n\np\n1\n\n\nt\n8e\nw\n\n" | /sbin/fdisk $disk ); 
            /sbin/pvcreate "${disk}1";
          fi; 
        done
      args:
        executable: /bin/bash
      when: freeDisk.stdout is defined


    - name: "Add new PVs to volume group"
 # Given a list of freeDisks, clean up the output and append the partition number to each disk.
 # This will turn a list:
 #   /dev/sdc
 #   /dev/sdd
 # Into:
 #   /dev/sdc1,/dev/sdc2
      shell: "echo \"{{ freeDisk.stdout }}\" |{{ cleanWhiteSpace }}| sed -e 's/$/1/' | xargs | sed -e 's/ /,/g' " 
      args:
        executable: /bin/bash
      register: freePVs
      when: freeDisk.stdout is defined

    - name: "Get existing PVs in VG {{ targetVG }}"
      shell: " vgs --separator , --noheadings -o pv_name {{ targetVG }} |{{ cleanWhiteSpace }} | xargs | sed -e 's/ /,/g' " 
      args:
        executable: /bin/bash
      register: currentPVs
      when: freeDisk.stdout is defined

    - name: "Extend {{ targetVG }}"
      lvg:  "vg={{ targetVG }}  pvs={{ currentPVs.stdout }},{{ freePVs.stdout }}" 
      when: freeDisk.stdout is defined


